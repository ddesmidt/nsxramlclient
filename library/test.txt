

import argparse
import ConfigParser
import json
from libutils import get_scope
from libutils import get_logical_switch
from tabulate import tabulate
from nsxramlclient.client import NsxClient
from pyVim.connect import SmartConnect, Disconnect
import ssl
from pyVmomi import vim, vmodl

config = ConfigParser.ConfigParser()
config.read("nsx.ini")
client_session = NsxClient(config.get('nsxraml', 'nsxraml_file'), config.get('nsxv', 'nsx_manager'),
                               config.get('nsxv', 'nsx_username'), config.get('nsxv', 'nsx_password'), debug="True")



all_int = client_session.read('interfaces', uri_parameters={'edgeId': "edge-86"})
dlr_int_list = []
dlr_int_list_verbose = []
for interface in all_int['body']['interfaces']['interface']:
    dlr_int_list.append((interface['connectedToName'], interface['index'],
                         interface['addressGroups']['addressGroup']['primaryAddress'],
                         interface['addressGroups']['addressGroup']['subnetMask']))
    dlr_int_list_verbose.append(interface)
dlr_int_list



all_int = client_session.read('interfaces', uri_parameters={'edgeId': "edge-86"})
dlr_int_list = []
dlr_int_list_verbose = []
for interface in all_int['body']['interfaces']['interface']:
    dlr_int_list.append((interface['connectedToName']))
    dlr_int_list_verbose.append(interface)


context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
context.verify_mode = ssl.CERT_NONE
si = SmartConnect(host="10.114.218.201",
                     user="administrator@vsphere.local",
                     pwd="VMware1!",
                     port=int("443"),
                     sslContext=context)


#DatacenterMoid
content = si.RetrieveContent()
datacenter_list = content.rootFolder.childEntity
for datacenter in datacenter_list:
    if datacenter.name == "Lab1":
        datacentermoid = datacenter._moId
print datacentermoid

#datastore
content = si.RetrieveContent()
datacenter_list = content.rootFolder.childEntity
for datacenter in datacenter_list:
    if datacenter.name == "Lab1":
        for datastore in datacenter.datastore:
            if datastore.name == "NFS_Lab1":
                datastorename = datastore._moId
print datastorename

#resourcepoolid
content = si.RetrieveContent()
datacenter_list = content.rootFolder.childEntity
for datacenter in datacenter_list:
    if datacenter.name == "Lab1":
        cluster_list = datacenter.hostFolder.childEntity
        for cluster in cluster_list:
            if cluster.name == "Cluster-MgtEdge":
                resourcepoolid = cluster.resourcePool._moId
print resourcepoolid

#vds port group id
content = si.RetrieveContent()
datacenter_list = content.rootFolder.childEntity
for datacenter in datacenter_list:
    if datacenter.name == "Lab1":
        network_list = datacenter.network
        for network in network_list:
            if network.name == "vDS-Mgt_PG":
                vdsportgroupid = network._moId
print vdsportgroupid



c:\Python27\python.exe nsx-dlr.py create -n aaa --ha_ls=vDS-Mgt_PG --uplink_ls=Transit_LS-02 --uplink_ip=172.16.2.2 --uplink_subnet=255.255.255.0 --uplink_dgw=172.16.2.1

    parser.add_argument("--uplink_ls",
                        help="dlr uplink LS name")
    parser.add_argument("--uplink_ip",
                        help="dlr uplink ip address")
    parser.add_argument("--uplink_subnet",
                        help="dlr uplink subnet")
    parser.add_argument("--uplink_dgw",
                        help="dlr uplink default gateway")

### Do I need to do the disconnect of the vCenter?